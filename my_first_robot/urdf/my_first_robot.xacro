<?xml version="1.0" ?>

<!-- 
  http://wiki.ros.org/urdf/XML

  In this xacro file we have defined the following:
    chasis + caster wheel : link type element
    wheels : link type elements (left + right)
    joints : joint type elements (left + right) 
--> 

<robot name="my_first_robot" xmlns:xacro="https://www.ros.org/wiki/xacro" >
  
  <xacro:include filename="$(find my_first_robot)/urdf/materials.xacro" />
  <xacro:include filename="$(find my_first_robot)/urdf/gazebo.xacro" />
  <xacro:include filename="$(find my_first_robot)/urdf/macro.xacro" />
  
  <!-- Defining link chassis -->
  <link name="link_chassis">
    <!-- pose and inertial -->
    <pose>0 0 0.1 0 0 0</pose>
  <!--  
    All of these elements have some common properties like inertial, collision and visual. 

    The inertial and collision properties enable physics simulation and the visual property controls the appearance of the robot.
  -->

    <!-- Inertial properties -->
    <inertial>
      <mass value="5"/>
      <origin rpy="0 0 0" xyz="0 0 0.1"/>
      <inertia ixx="0.0395416666667" ixy="0" ixz="0" iyy="0.106208333333" iyz="0" izz="0.106208333333"/>
    </inertial>
    <!-- Collision properties -->
    <collision name="collision_chassis">
      <geometry>
        <box size="0.5 0.3 0.07"/>
      </geometry>
    </collision>
    <!-- Visual properties -->
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.5 0.3 0.07"/>
      </geometry>
      <material name="blue"/>
    </visual>
    
    <!-- caster front -->
    <collision name="caster_front_collision">
      <origin rpy=" 0 0 0" xyz="0.35 0 -0.05"/>
      <geometry>
        <sphere radius="0.05"/>
      </geometry>
      <surface>
        <friction>
          <ode>
            <mu>0</mu>
            <mu2>0</mu2>
            <slip1>1.0</slip1>
            <slip2>1.0</slip2>
          </ode>
        </friction>
      </surface>
    </collision>
    <visual name="caster_front_visual">
      <origin rpy=" 0 0 0" xyz="0.2 0 -0.05"/>
      <geometry>
        <sphere radius="0.05"/>
      </geometry>
    </visual>
    </link>
  
  <!-- 
    Replace the wheel links with the following lines for macros:
  -->
  <xacro:link_wheel name="link_right_wheel" />
  <xacro:link_wheel name="link_left_wheel" />    

  <!--
    The joints help in defining the relative motion between links such as the motion of wheel with respect to the chassis. The wheels are links of cylindrical geometry, they are oriented (using rpy property) such that rolling is possible. The placement is controlled via the xyz property. For joints, we have specified the values for damping and friction as well.  

    Both wheels joints are replaced with the following two lines:
  -->
  <xacro:joint_wheel name="joint_right_wheel"  child="link_right_wheel"  origin_xyz="-0.05 0.15 0"  />
  <xacro:joint_wheel name="joint_left_wheel"   child="link_left_wheel"   origin_xyz="-0.05 -0.15 0"  />

  <!-- 
    Adding a laser scan sensor to the robot 
  -->
  <link name="sensor_laser">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <mass value="1" />
      <!-- RANDOM INERTIA BELOW -->
      
      <!--
        OLD INERTIA VALUE - BEFORE RANDOM VALUE INSERTED USING MACROS
        <inertia ixx="0.02" ixy="0" ixz="0" iyy="0.02" iyz="0" izz="0.02"/>
      -->
      <xacro:cylinder_inertia mass="1" r="0.05" l="0.1" />
    </inertial>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <cylinder radius="0.05" length="0.1"/>
      </geometry>
      <material name="white" />
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.05" length="0.1"/>
      </geometry>
    </collision>
  </link>

  <joint name="joint_sensor_laser" type="fixed">
    <origin xyz="0.15 0 0.05" rpy="0 0 0"/>
    <parent link="link_chassis"/>
    <child link="sensor_laser"/>
  </joint>

  <!-- 
    Laser gazebo plugin: sensor behaviour to the link

    Update rate : Controls how often (how fast) the laser data is captured
    samples : Defines how how many readings are contained in one scan
    resolution : Defines the minimum angular distance between readings captured in a laser scan
    range : Defines the minimum sense distance and maximum sense distance. If a point is below minimum sense its reading becomes zero(0) and if a point is further than the maximum sense distance its reading becomes inf. The range resolution defines the minimum distance between 2 points such that two points can be resolved as two separate points.
    noise : This parameter lets us add gaussian noise to the range data captured by the sensor
    topicName : Defines the name which is used for publishing the laser data
    frameName : Defines the link to which the plugin has to be applied

    see: http://gazebosim.org/tutorials?tut=ros_gzplugins#GPULaser for more information
  -->
  <gazebo reference="sensor_laser">
    <sensor type="ray" name="head_hokuyo_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>20</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>10.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
        <topicName>/my_first_robot/laser/scan</topicName>
        <frameName>sensor_laser</frameName>
      </plugin>
    </sensor>
  </gazebo>

</robot>